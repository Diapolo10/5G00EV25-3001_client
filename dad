warning: CRLF will be replaced by LF in src/structs/http_client.rs.
The file will have its original line endings in your working directory
[1mdiff --git a/src/app.rs b/src/app.rs[m
[1mindex b2e72df..6da0a92 100644[m
[1m--- a/src/app.rs[m
[1m+++ b/src/app.rs[m
[36m@@ -32,6 +32,7 @@[m [mfn update(&mut self, ctx: &egui::Context, frame: &mut eframe::Frame) {[m
                     ctx,[m
                     ui,[m
                     &http_client,[m
[32m+[m[32m                    &mut self.trigger_fetch_rooms,[m
                     &mut self.rooms,[m
                     &mut self.selected_chatroom,[m
                     &mut self.chatroom_search,[m
[1mdiff --git a/src/components/side_pane.rs b/src/components/side_pane.rs[m
[1mindex ca5b21f..8ef6055 100644[m
[1m--- a/src/components/side_pane.rs[m
[1m+++ b/src/components/side_pane.rs[m
[36m@@ -1,4 +1,3 @@[m
[31m-use eframe::epaint::ahash::{HashMap, HashMapExt};[m
 use egui::{Align, Layout, Stroke, Ui, Vec2};[m
 use reqwest::header::CONTENT_TYPE;[m
 use uuid::Uuid;[m
[36m@@ -38,6 +37,7 @@[m [mfn some_test() {[m
                 &ctx,[m
                 ui,[m
                 &http_client,[m
[32m+[m[32m                &mut true,[m
                 &mut rooms,[m
                 &mut "Chatroom 1".to_owned(),[m
                 &mut "chatroom".to_owned(),[m
[36m@@ -46,7 +46,7 @@[m [mfn some_test() {[m
     }[m
 }[m
 [m
[31m-fn create_room(http_client: &HttpClient, room_name: &str, room_public: bool) {[m
[32m+[m[32mfn create_room(http_client: &HttpClient, trigger_fetch: &mut bool, room_name: &str, room_public: bool) {[m
     let room_id = Uuid::new_v4().to_string();[m
     let user_id = Uuid::new_v4().to_string();[m
     let body = Room {[m
[36m@@ -63,8 +63,11 @@[m [mfn create_room(http_client: &HttpClient, room_name: &str, room_public: bool) {[m
         .json(&body)[m
         .send()[m
     {[m
[31m-        Ok(res) => println!("{:#?}", res.json::<Room>()),[m
[31m-        Err(err) => println!("Post room error: {:#?}", err),[m
[32m+[m[32m        Ok(res) => {[m
[32m+[m[32m            println!("{:#?}", res.json::<Room>());[m
[32m+[m[32m            *trigger_fetch = true;[m
[32m+[m[32m        }[m
[32m+[m[32m        Err(err) => println!("Post room error: {}", err.to_string()),[m
     };[m
 }[m
 [m
[36m@@ -80,7 +83,7 @@[m [mfn fetch_rooms(http_client: &HttpClient) -> Rooms {[m
                 return Rooms { rooms: vec![] };[m
             } else {[m
                 let rooms = res.json::<Vec<Room>>().unwrap();[m
[31m-                // println!("{:#?}", rooms);[m
[32m+[m[32m                println!("{:#?}", rooms);[m
                 return Rooms { rooms };[m
             }[m
         }[m
[36m@@ -95,6 +98,7 @@[m [mpub fn side_pane([m
     ctx: &egui::Context,[m
     ui: &mut Ui,[m
     http_client: &HttpClient,[m
[32m+[m[32m    trigger_fetch: &mut bool,[m
     rooms: &mut Rooms,[m
     selected_chatroom: &mut String,[m
     chatroom_search: &mut String,[m
[36m@@ -102,7 +106,10 @@[m [mpub fn side_pane([m
     //! A component that takes up the left side of the screen.[m
     //! It shows user profile and all the available chatrooms with a search functionality.[m
 [m
[31m-    *rooms = fetch_rooms(http_client);[m
[32m+[m[32m    if *trigger_fetch {[m
[32m+[m[32m        *rooms = fetch_rooms(http_client);[m
[32m+[m[32m        *trigger_fetch = false;[m
[32m+[m[32m    }[m
 [m
     // Use 20% of width for the side pane[m
     ui.allocate_ui_with_layout([m
[36m@@ -153,7 +160,7 @@[m [mpub fn side_pane([m
                     if button.clicked() {[m
                         let room_name = "New room";[m
                         let room_public = true;[m
[31m-                        create_room(http_client, room_name, room_public);[m
[32m+[m[32m                        create_room(http_client, trigger_fetch, room_name, room_public);[m
                     }[m
                 });[m
                 ui.add_space(12.);[m
[1mdiff --git a/src/structs/app.rs b/src/structs/app.rs[m
[1mindex f692bff..d96b291 100644[m
[1m--- a/src/structs/app.rs[m
[1m+++ b/src/structs/app.rs[m
[36m@@ -15,6 +15,8 @@[m [mpub struct ChatApp {[m
     pub selected_chatroom: String,[m
     pub chatroom_search: String,[m
     pub message: String,[m
[32m+[m[32m    pub trigger_fetch_rooms: bool,[m
[32m+[m[32m    pub trigger_fetch_messages: bool,[m
 }[m
 [m
 // impl Default for ChatApp {[m
[36m@@ -48,6 +50,8 @@[m [mpub fn new(cc: &eframe::CreationContext<'_>) -> Self {[m
             selected_chatroom: "".to_owned(),[m
             chatroom_search: "".to_owned(),[m
             message: "".to_owned(),[m
[32m+[m[32m            trigger_fetch_rooms: true,[m
[32m+[m[32m            trigger_fetch_messages: true,[m
         }[m
 [m
         // Default::default();[m
[1mdiff --git a/src/structs/http_client.rs b/src/structs/http_client.rs[m
[1mindex b44f849..f1941cc 100644[m
[1m--- a/src/structs/http_client.rs[m
[1m+++ b/src/structs/http_client.rs[m
[36m@@ -1,4 +1,6 @@[m
 /// Creates an instance of reqwest client and stores base url[m
[32m+[m[32m// This could be made to a singleton but multiple instances might be needed for testing[m
[32m+[m[32m// Also using the client as singleton seemed like a lot of work[m
 pub struct HttpClient {[m
     pub client: reqwest::blocking::Client,[m
     pub base_url: String,[m
